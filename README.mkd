# UART to CSV

[![Project Status: Active – The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active "Project Status: Active – The project has reached a stable, usable state and is being actively developed.")

Python script for reading a line via UART and appending it to a CSV file along with a timestamp


## What it does

The goal is to read a device's unique ID via UART, display it, log it in a CSV file (along with a timestamp and the operator's name), and print it via a label printer. This is a typical step of a device's production process. The unique ID is stuck on the device to help an installation technician know which device is which.

If the device is a 1-Wire sensor, the device ID would be the sensor's unique 1-Wire bus address.

Test to work with Windows and Linux.

### Typical workflow
1. Get a device's unique ID via UART.
2. Display device ID for the operator.
3. Save device ID, timestamp, and operator's name to a CSV file.
4. Print device ID via a label printer.

### Details
* **Label.** Put on the device so the installer can identify each device based on device ID.
* **CSV files.** Serve as a production log. They are used to notify the operator if a device ID occurs a second time.
* **UART.** Acts as a generic interface to any kind of bus in case the sensor does not provide its network address via UART:
```text
                                                                 .-> display
1-Wire sensor <-> Arduino <-> UART/USB adapter <-> Python script --> label printer
                                                                 `-> CSV file
```


## Interaction with Arduino

* Default serial port configuration: 115200 8N1 (`serial_baud_rate`)
* Default read timeout: 2 seconds (`serial_timeout_read`)
* Default command to query Arduino for device: `print_id` (`serial_cmd`)
* This script expects the first 16 characters of the Arduino's response to be the device ID. Everything that follows the first 16 characters is ignored.


## Milestones

* [X] Straightforward user interaction
* [X] Write CSV file
* [X] Working serial communication
* [ ] Print the device ID via a label printer
* [ ] Take care of the `TODO` and `FIXME` code annotations


## Getting started

It requires Python v2.7 or later.

**Linux**
```bash
$ sudo apt-get install python2.7 python-serial
$ ./read.py
```

**Windows**  
[Download](https://www.python.org/downloads/windows/) the latest Python 2 version.
```text
> pip install -r requirements.txt
> read.py
```


## Typical output

**Command line**

No serial port:
```text
$ ./read.py
[!] No suitable serial port found.
```

One serial port:
```text
$ ./read.py
[+] Using only available serial port: /dev/ttyUSB0
[+] Successfully connected.

[+] Operator's initials:
>>> mkm

Press ENTER to read a line from the serial port.
Press 'q' and ENTER to exit.

2018-11-19 13:15:34  DEADBEEFCAFED00D

2018-11-19 13:15:42  FEEDFACEC00010FF

2018-11-19 13:15:50  BADDCAFED15EA5E0

2018-11-19 13:15:58  FEE1DEADFEEEFEEE
q
[+] Closed /dev/ttyUSB1.
[+] Closed CSV file.
```

Two serial ports:
```text
C:\Users\mkm>read.py
[+] Select one of the available serial ports:
    (1) COM15 "Silicon Labs CP210x USB to UART Bridge (COM15)"
    (2) COM4 "Silicon Labs CP210x USB to UART Bridge (COM4)"
>>> 3
[!] Invalid serial port.

[+] Select one of the available serial ports:
    (1) COM15 "Silicon Labs CP210x USB to UART Bridge (COM15)"
    (2) COM4 "Silicon Labs CP210x USB to UART Bridge (COM4)"
>>> 2
[+] Successfully connected.

[+] Operator's initials:
>>> mkm

Press ENTER to read a line from the serial port.
Press q and ENTER to exit.

2018-11-22 12:47:50  DEADBEEFCAFED00D

2018-11-22 12:47:51  FEEDFACEC00010FF

2018-11-22 12:47:53  BADDCAFED15EA5E0

2018-11-22 12:47:54  FEE1DEADFEEEFEEE
q
[+] Closed COM4.
[+] Closed CSV file.
```


**CSV file**

```text
2018-11-19 13:15:34, DEADBEEFCAFED00D, mkm
2018-11-19 13:15:50, FEEDFACEC00010FF, mkm
2018-11-19 13:16:06, BADDCAFED15EA5E0, mkm
2018-11-19 13:16:22, FEE1DEADFEEEFEEE, mkm
```


## License

**GNU General Public License v3.0**

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License, version 3, as published by the Free Software Foundation.

See [LICENSE](LICENSE) for details.


## Comparable projects

**Please add them.**

